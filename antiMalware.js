(function () {

  const oldXHROpen = window.XMLHttpRequest.prototype.open;
  const oldXHRSend = window.XMLHttpRequest.prototype.send;
  const oldFetch = window.fetch;
  const oldGetItem = localStorage.getItem;
  const oldGetElementById = document.getElementById;
  // document.querySelector
  // document.querySelectorAll
  // document.getElementsByClassName
  // document.getElementsByName
  // document.getElementsByTagName
  // document.getElementsByTagNameNS
  // document.insertBefore


  // let oldCookie = document.cookie;
  // document.cookie = (function(){
  //   return console.log("no hands no cookie :) ");
  // })();
  // document.writeCookie = function(data){  
  //   console.log(data);
  //   oldCookie = data;
  // } 
  // document.writeCookie("abcdefg");


  function stackValidator(stack,name){
    let i = 0;
    stack = parseStack(stack);
    if(stack[i].includes(name)){
      i++;
    }
    if(!stack[i].includes("monitorHttpRequest.js")){
      const j = stack[i].lastIndexOf("/");
      const fileName = stack[i].substring(j, stack[i].length);
      // const regex = /(?<=)(.*)(?<=/)/g;
      // const file = stack[i].replace(regex,"");
      return {valid:false,file:fileName};
    }
    return {valid:true,file:""};
  }

  function parseStack(stack) {
    stack = stack.split('\n');
    if(stack[0] == "Error"){
      stack.shift();
    }
    stack = stack.map((row) => row.trim().replace("at", ""));
    return stack;
  }

  //getElementById override
  document.getElementById = function(){
    let stack = new Error().stack || '';
    const isValid = stackValidator(stack,"getElementById");
    if(!isValid.valid){
      console.log(`acess to getElementById was blocked , execute from file => ${isValid.file}`);
      return;
    }
    console.log("getElementById(" + arguments[0] + ")");
    return oldGetElementById.apply(this,arguments);
  }
 
  //localStorage override
  localStorage.getItem = function(){
    let stack = new Error().stack || '';
    const isValid = stackValidator(stack,"getItem");
    if(!isValid.valid){
      console.log(`acess to local storage was blocked , execute from file => ${isValid.file}`);
      return;
    }
    console.log("got acess to local storage ");
    return oldGetItem.apply(this,arguments);
  }


  //ovrride fetch
  window.fetch = function() {
      console.log(arguments[0]);
      // Get the parameter in arguments
      // Intercept the parameter here 
     return oldFetch.apply(this, arguments)
  }

  

  //override xhr send
  window.XMLHttpRequest.prototype.send = function () {
    //prevent if open blocked 
    if(this.readyState == 0){
      return;
    }
    return oldXHRSend.apply(this, arguments);
  }

  //override xhr open
  window.XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
    let stack = new Error().stack || '';
    const isValid = stackValidator(stack,"open");
    if(!isValid.valid){
      console.log(`Xhr request was blocked "${url}", execute from file => ${isValid.file}`);
      return;
    }
    return oldXHROpen.apply(this, arguments);
  }
})();

